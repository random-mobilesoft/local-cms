
function isValidURL(url){
    var RegExp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;

    if(RegExp.test(url)){
        return true;
    }else{
        return false;
    }
}

// Generated by CoffeeScript 1.6.1
(function() {
  var $, Controller, ControllerLayout, ControllerMenu, ControllerTabs, Region, RegionAside, RegionAudioplayer, RegionBackground, RegionBlog, RegionCollection, RegionGallery, RegionHalfpage, RegionHome, RegionLoader, RegionMenu, RegionPage, RegionSidebar, RegionSocials, RegionVideo, controllers, regionsEntered, regionsQuitted, resizeCallback, _resizeX,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Region = (function() {

    function Region($el, global) {
      var _this = this;
      this.$el = $el;
      this.global = global;
      this.id = _.uniqueId('region_');
      this.events = {
        listeners: [],
        on: function(event, callback) {
          var e;
          if (_.isString(event) && _.isFunction(callback)) {
            e = {
              event: event,
              callback: callback
            };
            app.events.on(e.event, e.callback);
            this.listeners.push(e);
          }
          return this;
        },
        off: function(event, callback) {
          app.events.off(event, callback);
          return this;
        },
        clear: function() {
          var _this = this;
          console.log;
          _.each(this.listeners, function(e) {
            return app.events.off(e.event, e.callback);
          });
          return this;
        },
        trigger: function(event, args) {
          if (_.isString(event)) {
            return app.events.trigger(event, args);
          }
        }
      };
      if (!this.global) {
        this.events.on('view.enter', function() {
          return _this.enter();
        });
        this.events.on('view.exit', function() {
          return _this.exit();
        });
      }
      this.init();
      this;
    }

    Region.prototype.init = function() {
      return this;
    };

    Region.prototype.enter = function() {
      this.events.trigger('region.entered', [this]);
      return this;
    };

    Region.prototype.exit = function() {
      this.events.trigger('region.quitted', [this]);
      this.events.clear();
      return this;
    };

    return Region;

  })();

  /* --------------------------------------------
       Begin controller.coffee
  --------------------------------------------
  */


  Controller = (function() {

    function Controller() {}

    return Controller;

  })();

  /* --------------------------------------------
       Begin app.coffee
  --------------------------------------------
  */


  window.app = {
    config: {
      baseUrl: mthemes_baseUrl,
      contentId: 'content',
      debug: jQuery.browser.msie && (parseInt(jQuery.browser.version) < 10) ? false : true,
      debugEvents: false,
      pushState: Modernizr.history ? true : false,
      ajaxLoad: mthemes_pagesReload ? false : true
    },
    events: new EventEmitter(),
    log: function(x) {
      if (app.config.debug && console && console.log) {
        return console.log(x);
      }
    },
    utils: {},
    vars: {}
  };

  $ = window.jQuery;

  if (Modernizr.history) {
    window.history.replaceState({
      url: window.location.href
    }, '');
    window.addEventListener('popstate', function(e) {
      if (_.isObject(e.state) && _.isString(e.state.url)) {
        return app.events.trigger('history.statechange', [e.state]);
      }
    });
    app.events.on('history.statechange', function(state) {
      return console.log("url changed in " + state.url);
    });
  }

  /*
  view state sequence:
  
  history.statechange (anchor click / history forward / history back)
  view.exit (regions begins to quit)
  view.quitted (every $content region has quitted)
  view.load (load new page)
  view.rendered (new view content is appended to $content) or view.notRendered
  view.enter (new view begin to enter)
  view.entered (every $content region is entered)
  */


  app.view = {
    init: function() {
      var _this = this;
      app.log('app view init');
      this.elements = {};
      if (app.config.pushState && app.config.ajaxLoad) {
        app.events.on('history.statechange', function() {
          var cb;
          cb = function() {
            return app.events.trigger('view.exit');
          };
          return _.delay(cb, 0);
        });
        app.events.on('regions.contentRegionsQuitted', function() {
          var cb;
          cb = function() {
            return app.events.trigger('view.quitted');
          };
          return _.delay(cb, 0);
        });
        app.events.on('view.quitted', function() {
          return _this.load();
        });
        app.events.on('view.rendered', function() {
          return _this.setAnchors();
        });
      } else {
        app.log('history not enabled');
      }
      app.events.on('regions.contentRegionsEntered', function() {
        var cb;
        app.log('view entered');
        cb = function() {
          return app.events.trigger('view.entered');
        };
        return _.delay(cb, 0);
      });
      app.events.on('view.rendered', function() {
        var adminBar, cb;
        _this.elements.$content.find('[type="application/rss+xml"],[type="application/rsd+xml"],[type="application/wlwmanifest+xml"],[name="generator"],[rel="canonical"],[rel="shortlink"]').remove();
        _this.elements.$content.animate({
          'scrollTop': 'scrollTop',
          0: 0
        }, 1000);
        adminBar = _this.elements.$content.find('#wpadminbar').detach();
        if (adminBar.length) {
          $('#wpadminbar').remove();
          $('body:eq(0)').append(adminBar);
        }
        cb = function() {
          return app.events.trigger('view.enter');
        };
        return _.delay(cb, 0);
      });
      return app.events.on('document.ready', function() {
        var cb;
        _this.title = $('title').text();
        if (_.isString(app.config.contentId)) {
          _this.elements.$content = $("#" + app.config.contentId);
        }
        cb = function() {
          return app.events.trigger('view.rendered');
        };
        return _.delay(cb, 0);
      });
    },
    setAnchors: function() {
      var anchors, title;
      anchors = $('a:not(.ab-item):not([data-history-bypass]):not([data-history-set]):not("#comments a")');
      title = this.title;
      _.each(anchors, function(el, i) {
        var $el, host, path, url;
        $el = $(el);
        url = app.utils.parseUrl($el.attr('href'));
        path = url.path;
        host = url.host;
        if ((_.isString(path) && _.isArray(path.match(/\.[0-9a-z]{3,}$/))) || (host !== window.location.host && !_.isUndefined(host))) {
          return $el.attr({
            'data-history-bypass': 'true',
            'target': '_blank'
          });
        } else {
          return $el.attr('data-history-set', true).on('click', function(e) {
            var href, state;
            href = $(this).attr('href');
            e.preventDefault();
            if (_.isString(href) && href.length > 0 && href !== window.location.href) {
              state = {
                url: href
              };
              window.history.pushState(state, title, href);
              return app.events.trigger('history.statechange', [state]);
            }
          });
        }
      });
      app.log("" + anchors.length + " anchors set");
      return anchors;
    },
    load: function() {
      var _this = this;
      app.log("load a new page");
      this.elements.$content.load(window.location.href, null, function(responseText, textStatus, request) {
        if (textStatus === 'success') {
          app.log("page successfully loaded");
          $('html,body').animate({
            scrollTop: 0
          });
          return app.events.trigger('view.rendered');
        } else {
          return app.events.trigger('view.notRendered');
        }
      });
      return null;
    }
  };

  regionsQuitted = 0;

  regionsEntered = 0;

  app.regions = {
    viewRegions: {
      global: [],
      content: []
    },
    init: function() {
      var _this = this;
      if (app.config.pushState && app.config.ajaxLoad) {
        app.events.on('history.statechange', function() {
          regionsQuitted = 0;
          return regionsEntered = 0;
        });
        app.events.on('region.quitted', function(region) {
          var cb, regionId, regionsTot;
          regionId = region.id;
          regionsTot = _this.viewRegions.content.length;
          _.each(_this.viewRegions.content, function(r) {
            if (r.id === regionId) {
              return regionsQuitted++;
            }
          });
          if (regionsQuitted === regionsTot) {
            cb = function() {
              return app.events.trigger('regions.contentRegionsQuitted');
            };
            return _.delay(cb, 0);
          }
        });
      }
      app.events.on('region.entered', function(region) {
        var cb, regionId, regionsTot;
        regionId = region.id;
        regionsTot = _this.viewRegions.content.length;
        _.each(_this.viewRegions.content, function(r) {
          if (r.id === regionId) {
            return regionsEntered++;
          }
        });
        if (regionsEntered === regionsTot) {
          cb = function() {
            return app.events.trigger('regions.contentRegionsEntered');
          };
          return _.delay(cb, 0);
        }
      });
      app.events.on('document.ready', function() {
        return _this.setRegions();
      });
      app.events.on('view.rendered', function() {
        return _this.setRegions(false);
      });
      return null;
    },
    setRegions: function(global) {
      var regions, regionsTot, viewRegions;
      if (global == null) {
        global = true;
      }
      regionsTot = 0;
      viewRegions = [];
      global = _.isBoolean(global) ? global : true;
      regions = global ? $("[data-region]").not("#" + app.config.contentId + " [data-region]") : $("#" + app.config.contentId + " [data-region]");
      _.each(regions, function(el, i) {
        var $el, region, regionClassName, regionType;
        $el = $(el);
        regionType = $el.attr('data-region').substr(0, 1).toUpperCase() + $el.attr('data-region').substr(1).toLowerCase();
        regionClassName = "Region" + regionType;
        if (eval("typeof " + regionClassName) === 'function') {
          region = new (eval(regionClassName))($el, global);
          viewRegions.push(region);
          $el.attr('data-region-id', region.id);
          regionsTot++;
          return null;
        }
      });
      if (global) {
        app.regions.viewRegions.global = viewRegions;
      } else {
        app.regions.viewRegions.content = viewRegions;
      }
      app.log(global ? "" + regionsTot + " global regions set" : "" + regionsTot + " content regions set");
      return regionsTot;
    }
  };

  controllers = [];

  app.controllers = {
    init: function() {
      var cb,
        _this = this;
      cb = function() {
        app.events.trigger('controllers.init');
        _.each(controllers, function(controller) {
          if (_.isFunction(controller.init)) {
            return controller.init();
          }
        });
        return null;
      };
      app.events.on('document.ready', cb);
      return null;
    },
    get: function() {
      return controllers;
    },
    set: function(controller) {
      if (controller instanceof Controller) {
        controllers.push(controller);
      }
      return null;
    }
  };

  $(document).on('ready', function() {
    return app.events.trigger('document.ready');
  });

  _resizeX = 0;

  resizeCallback = function() {
    var cb, _resizeY;
    _resizeX++;
    _resizeY = _resizeX;
    cb = function() {
      if (_resizeY === _resizeX) {
        return app.events.trigger('viewport.resize');
      }
    };
    return _.delay(cb, 100);
  };

  $(window).on('resize', resizeCallback);

  app.events.on('app.init', function() {
    app.regions.init();
    app.view.init();
    return app.controllers.init();
  });

  app.log('app.init');

  app.events.trigger('app.init');

  /* --------------------------------------------
       Begin animate.coffee
  --------------------------------------------
  */


  app.animate = function(o) {
    var animationCompleted, events, transitionCompleted;
    if (!_.isObject(o)) {
      return false;
    }
    if ((!_.isString(o.cssClass)) || (!_.isObject(o.element))) {
      return false;
    }
    if (o.element.length) {
      o.element = o.element[0];
    }
    if (_.isObject(o.target && o.target.length && o.target instanceof jQuery)) {
      o.target = o.target[0];
    }
    o.$element = $(o.element);
    events = (function() {
      var a, animationEventName, animations, el, t, transitionEventName, transitions;
      el = document.createElement('div');
      transitions = {
        'transition': 'transitionend',
        'OTransition': 'oTransitionEnd',
        'MozTransition': 'transitionend',
        'WebkitTransition': 'webkitTransitionEnd'
      };
      animations = {
        'animation': 'animationend',
        'OAnimation': 'oAnimationEnd',
        'MozAnimation': 'animationend',
        'WebkitAnimation': 'webkitAnimationEnd'
      };
      for (t in transitions) {
        if (el.style[t] !== void 0) {
          transitionEventName = transitions[t];
        }
      }
      for (a in animations) {
        if (el.style[a] !== void 0) {
          animationEventName = animations[a];
        }
      }
      return {
        'transitionEnd': transitionEventName,
        'animationEnd': animationEventName
      };
    })();
    if (!_.isString(events.transitionEnd) || !_.isString(events.animationEnd)) {
      return false;
    }
    transitionCompleted = function(e) {
      var target;
      e.target.removeEventListener(events.transitionEnd, transitionCompleted, false);
      e.target.removeEventListener(events.animationEnd, animationCompleted, false);
      target = _.isElement(o.target) ? o.target : o.element;
      if (e.target === target && _.isFunction(o.complete)) {
        o.complete.apply(o.element, ['transition', o.cssClass, o.element]);
      }
      return null;
    };
    animationCompleted = function(e) {
      var target;
      e.target.removeEventListener(events.transitionEnd, transitionCompleted, false);
      e.target.removeEventListener(events.animationEnd, animationCompleted, false);
      target = _.isElement(o.target) ? o.target : o.element;
      if (e.target === target && _.isFunction(o.complete)) {
        o.complete.apply(o.element, ['animation', o.cssClass, o.element]);
      }
      return null;
    };
    if (_.isElement(o.element)) {
      o.element.addEventListener(events.transitionEnd, transitionCompleted, false);
      o.element.addEventListener(events.animationEnd, animationCompleted, false);
      o.$element.toggleClass(o.cssClass);
    }
    return true;
  };

  /* --------------------------------------------
       Begin utils.coffee
  --------------------------------------------
  */


  app.utils.parseUrl = function(str, component) {
    var i, ini, key, m, mode, name, parser, uri;
    key = ["source", "scheme", "authority", "userInfo", "user", "pass", "host", "port", "relative", "path", "directory", "file", "query", "fragment"];
    ini = (this.php_js && this.php_js.ini) || {};
    mode = (ini["phpjs.parse_url.mode"] && ini["phpjs.parse_url.mode"].local_value) || "php";
    parser = {
      php: /^(?:([^:\/?#]+):)?(?:\/\/()(?:(?:()(?:([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?()(?:(()(?:(?:[^?#\/]*\/)*)()(?:[^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
      strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
      loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/\/?)?((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
    };
    m = parser[mode].exec(str);
    uri = {};
    i = 14;
    while (i--) {
      if (m[i]) {
        uri[key[i]] = m[i];
      }
    }
    if (component) {
      return uri[component.replace("PHP_URL_", "").toLowerCase()];
    }
    if (mode !== "php") {
      name = (ini["phpjs.parse_url.queryKey"] && ini["phpjs.parse_url.queryKey"].local_value) || "queryKey";
      parser = /(?:^|&)([^&=]*)=?([^&]*)/g;
      uri[name] = {};
      uri[key[12]].replace(parser, function($0, $1, $2) {
        if ($1) {
          return uri[name][$1] = $2;
        }
      });
    }
    delete uri.source;
    return uri;
  };

  app.utils.imagePreload = function(img, callback) {
    var el, src;
    el = document.createElement('img');
    src = img;
    if ((!_.isString(img)) && _.isElement(img)) {
      src = $(img).attr("src");
    }
    if (_.isString(src)) {
      el.setAttribute("src", src);
      $(el).on("load", function() {
        app.events.trigger("utils.imagePreload", [src, el]);
        if (_.isFunction(callback)) {
          return callback.apply(this, [src, el]);
        }
      });
      return true;
    }
    return false;
  };

  /* --------------------------------------------
       Begin controllers.coffee
  --------------------------------------------
  */


  app.events.on('controllers.init', function() {
    app.controllers.set(new ControllerLayout);
    app.controllers.set(new ControllerTabs);
    return app.controllers.set(new ControllerMenu);
  });

  /* --------------------------------------------
       Begin controller.layout.coffee
  --------------------------------------------
  */


  ControllerLayout = (function(_super) {

    __extends(ControllerLayout, _super);

    function ControllerLayout() {
      return ControllerLayout.__super__.constructor.apply(this, arguments);
    }

    ControllerLayout.prototype.contentMinHeight = 550;

    ControllerLayout.prototype.init = function() {
      this.$container = $('#container:eq(0)');
      this.$html = $('html:eq(0)');
      this.$header = $('header:eq(0)');
      this.$footer = $('footer:eq(0)');
      this.$body = $('body:eq(0)');
      this.scrollLayout = null;
      this.removeHtmlMargin();
      return this;
    };

    ControllerLayout.prototype.removeHtmlMargin = function() {
      if (this.$body.hasClass('admin-bar')) {
        this.$html[0].setAttribute('style', 'margin-top: 0 !important');
      }
      return this;
    };

    return ControllerLayout;

  })(Controller);

  /* --------------------------------------------
       Begin controller.tabs.coffee
  --------------------------------------------
  */


  ControllerTabs = (function(_super) {

    __extends(ControllerTabs, _super);

    function ControllerTabs() {
      return ControllerTabs.__super__.constructor.apply(this, arguments);
    }

    ControllerTabs.prototype.init = function() {
      var _this = this;
      app.events.on('view.rendered', function() {
        return _this.set();
      });
      this.tabs = [];
      return this;
    };

    ControllerTabs.prototype.set = function() {
      var _this = this;
      this.$tabs = $('.tabs');
      if (this.$tabs.length) {
        this.$tabs.each(function(index, el) {
          var $contents, $div, $el, $labels, $select, $ul, lcb, scb;
          $el = $(el);
          $labels = $el.find('span.tab-label');
          $contents = $el.find('div.tab');
          if (($labels.length === $contents.length) && ($labels.length > 0)) {
            $contents.filter(':gt(0)').addClass('state-hide');
            $div = $('<div></div>');
            $ul = $('<ul></ul>');
            $div.addClass('tabs-label');
            $labels.each(function(i, el) {
              var $li, $span;
              $span = $(el);
              $li = $("<li>" + ($span.text()) + "</li>");
              $li.attr('data-index', i);
              if (i > 0) {
                $li.addClass('tab-unsel');
              }
              return $ul.append($li);
            });
            $ul.append('<li>&nbsp;</li>');
            $div.append($ul);
            $el.prepend($div);
            $labels.remove();
            $labels = $el.find(".tabs-label ul li");
            lcb = function(e) {
              var $tabs;
              $el = $(e.target);
              if ($el.hasClass('tab-unsel')) {
                index = $el.attr('data-index');
                $tabs = $el.parent().parent().parent();
                return _this["switch"]($tabs, index);
              }
            };
            $labels.on('click', function(e) {
              return lcb(e);
            });
            $select = $('<select />');
            $labels.each(function(index, el) {
              var labelText;
              labelText = $(el).text();
              if (index < $labels.length - 1) {
                return $select.append("<option value='" + index + "'>" + labelText + "</option>");
              }
            });
            scb = function(e) {
              var $tabs;
              $el = $(e.target);
              $tabs = $el.parent();
              index = $el.val();
              return _this["switch"]($tabs, index);
            };
            $select.on('change', function(e) {
              return scb(e);
            });
            return $el.prepend($select);
          }
        });
      }
      return this;
    };

    ControllerTabs.prototype["switch"] = function($el, i) {
      var $contents, $labels;
      $contents = $el.find('.tab');
      $labels = $el.find('.tabs-label ul li');
      console.log($contents);
      $contents.not('.state-hide').addClass('state-hide');
      $contents.filter(":eq(" + i + ")").removeClass('state-hide');
      $labels.not('.tab-unsel').not(':last-child').addClass('tab-unsel');
      $labels.filter(":eq(" + i + ")").removeClass('tab-unsel');
      $el.find('select:eq(0)').val(i);
      return this;
    };

    return ControllerTabs;

  })(Controller);

  /* --------------------------------------------
       Begin controller.menu.coffee
  --------------------------------------------
  */


  ControllerMenu = (function(_super) {

    __extends(ControllerMenu, _super);

    function ControllerMenu() {
      return ControllerMenu.__super__.constructor.apply(this, arguments);
    }

    ControllerMenu.prototype.init = function() {
      var dataOptions, htmlOptions, htmlSelect, selectId,
        _this = this;
      this.$container = $('#footer-menu');
      this.$bar = $('#footer-bar');
      this.$menu = this.$container.find('> * > ul');
      selectId = 'select-navigation';
      dataOptions = this.getSelectData();
      htmlOptions = this.getSelectHtml(dataOptions);
      htmlSelect = "<select id='" + selectId + "'>" + htmlOptions + "</select>";
      this.$bar.append(htmlSelect);
      this.$select = this.$bar.find("#" + selectId);
      this.$select.on('change', function(e) {
        return _this.onSelectChange(e);
      });
      app.events.on('history.statechange', function(state) {
        var $options, optionSelected, url;
        url = state.url;
        optionSelected = false;
        $options = _this.$select.find('option');
        $options.each(function(i, el) {
          var $el;
          $el = $(el);
          if ($el.attr('value') === url) {
            return optionSelected = el;
          }
        });
        if (optionSelected) {
          $options.removeAttr('selected');
          return $(optionSelected).attr('selected', 'true');
        }
      });
      return this;
    };

    ControllerMenu.prototype.setMenuWidth = function() {
      var $li, firstTop, iconsDisplay, iconsWidth, menuContainerWidth, menuWidth,
        _this = this;
      iconsDisplay = this.$icons.css('display');
      if (iconsDisplay === 'block') {
        iconsWidth = this.$icons.width();
        menuContainerWidth = this.$menu.parent().parent().width();
        menuWidth = menuContainerWidth - iconsWidth - 21;
        this.$menu.css('width', menuWidth);
      } else {
        this.$menu.css('width', 'auto');
      }
      firstTop = null;
      $li = this.$menu.find('> li');
      $li.removeClass('hide');
      $li.each(function(i, el) {
        var $el;
        $el = $(el);
        if (i === 0) {
          firstTop = $el.position().top;
        }
        if ($el.position().top > firstTop) {
          return $el.addClass('hide');
        }
      });
      return this;
    };

    ControllerMenu.prototype.getSelectData = function($el) {
      var $anchors, tmp,
        _this = this;
      if ($el == null) {
        $el = this.$menu;
      }
      tmp = [];
      if ($el.length) {
        $anchors = $el.find('> li > a');
        $anchors.each(function(i, el) {
          var $a, href, option;
          $a = $(el);
          href = $a.attr('href');
          if (!href) {
            href = window.location.href;
          }
          option = {
            value: href,
            label: $a.text()
          };
          if (_.isElement($a.next()[0]) && ($a.next()[0].tagName === 'UL')) {
            option.sub = _this.getSelectData($a.next());
          }
          return tmp.push(option);
        });
      }
      return tmp;
    };

    ControllerMenu.prototype.getSelectHtml = function(o) {
      var cb, str,
        _this = this;
      str = '';
      cb = function(o) {
        var option, options, selected;
        selected = o.value === location.href ? 'selected' : '';
        option = "<option " + selected + " value='" + o.value + "'>" + o.label + "</option>";
        if (o.sub) {
          options = _this.getSelectHtml(o.sub);
          o.label = o.label.replace(/\'/g, '&apos;');
          option += "<optgroup label='" + o.label + "'>" + options + "</optgroup>";
        }
        return str += option;
      };
      _.each(o, function(o) {
        return cb(o);
      });
      return str;
    };

    ControllerMenu.prototype.onSelectChange = function(e) {
      var $el, state, value;
      $el = $(e.target);
      value = $el.val();
      if (typeof value !== 'undefined') {
        if (app.config.pushState && app.config.ajaxLoad) {
          state = {
            url: value
          };
          window.history.pushState(state, app.view.title, value);
          app.events.trigger('history.statechange', [state]);
        } else {
          window.location = value;
        }
      }
      return value;
    };

    return ControllerMenu;

  })(Controller);

  /* --------------------------------------------
       Begin regions.coffee
  --------------------------------------------
  */


  /* --------------------------------------------
       Begin region.audioplayer.coffee
  --------------------------------------------
  */


  RegionAudioplayer = (function(_super) {

    __extends(RegionAudioplayer, _super);

    function RegionAudioplayer() {
      return RegionAudioplayer.__super__.constructor.apply(this, arguments);
    }

    RegionAudioplayer.prototype.init = function() {
      var _this = this;
      this.supports = {
        mp3: Modernizr.audio.mp3,
        ogg: Modernizr.audio.ogg
      };
      this.audio = Modernizr.audio.mp3 || Modernizr.audio.ogg ? true : false;
      this.tracks = typeof mthemes_audioPlayerTracks === 'object' && _.isArray(mthemes_audioPlayerTracks) ? mthemes_audioPlayerTracks : null;
      this.setup = this.audio && this.tracks && this.tracks.length ? true : false;
      this.index = this.setup ? 0 : null;
      this.$audio = this.$el.find('audio:eq(0)');
      this.trackname = this.$el.find('#audioplayer-text');
      this.$previous = this.$el.find('#audioplayer-previous');
      this.$next = this.$el.find('#audioplayer-next');
      this.$pause = this.$el.find('#audioplayer-pause');
      this.$play = this.$el.find('#audioplayer-play');
      this.$text = this.$el.find('#audioplayer-text');
      this.$el.parent().addClass('footer-with-player');
      this.setTrack();
      this.$el.addClass('state-pause');
      this.$play.hammer().on('tap', function() {
        return _this.events.trigger('audioplayer.play');
      });
      this.$pause.hammer().on('tap', function() {
        return _this.events.trigger('audioplayer.pause');
      });
      this.$previous.hammer().on('tap', function() {
        return _this.events.trigger('audioplayer.previous');
      });
      this.$next.hammer().on('tap', function() {
        return _this.events.trigger('audioplayer.next');
      });
      this.$audio.on('ended', function() {
        return _this.next();
      });
      this.events.on('audioplayer.play', function() {
        return _this.play();
      });
      this.events.on('audioplayer.pause', function() {
        return _this.pause();
      });
      this.events.on('audioplayer.previous', function() {
        return _this.previous();
      });
      this.events.on('audioplayer.next', function() {
        return _this.next();
      });
      this.events.on('audioplayer.autoplay', function() {
        return _this.events.trigger('audioplayer.play');
      });
      this.events.on('viewport.resize', function() {
        return _this.switchDisplay();
      });
      if (typeof mthemes_audioPlayerAutoplay === 'boolean' && mthemes_audioPlayerAutoplay) {
        this.events.trigger('audioplayer.play');
      }
      this.switchDisplay();
      return this;
    };

    RegionAudioplayer.prototype.switchDisplay = function() {
      var $footer, $menu, footerWidth, menuWidth, playerWidth, socialWidth,
        _this = this;
      $footer = this.$el.parent();
      $menu = $footer.find('#footer-menu > * > ul');
      menuWidth = 0;
      playerWidth = this.$el.width();
      footerWidth = $footer.width() / 2;
      socialWidth = $footer.find('#footer-socials').width() + 7;
      $menu.find('li').each(function(i, el) {
        return menuWidth += $(el).width() + 1;
      });
      if ((playerWidth + menuWidth + socialWidth) > footerWidth) {
        this.$text.css('display', 'none');
        $footer.addClass('footer-with-audioplayer-without-text');
        $footer.removeClass('footer-with-audioplayer-with-text');
      } else {
        this.$text.css('display', 'block');
        $footer.addClass('footer-with-audioplayer-with-text');
        $footer.removeClass('footer-with-audioplayer-without-text');
      }
      return this;
    };

    RegionAudioplayer.prototype.resize = function() {
      var boxWidth, callback, differenceWidth, elementsWidth, tracknameWidth,
        _this = this;
      boxWidth = this.$el.width();
      elementsWidth = 0;
      callback = function(i, el) {
        var $el;
        $el = $(el);
        elementsWidth += $el.width();
        return elementsWidth += parseInt($el.css('margin-left'));
      };
      this.$el.find(" > * ").not('audio').each(callback);
      differenceWidth = boxWidth - elementsWidth;
      tracknameWidth = (this.trackname.width() + differenceWidth) - 2;
      this.trackname.width(tracknameWidth);
      return this;
    };

    RegionAudioplayer.prototype.setTrack = function() {
      var el, track;
      if (this.setup) {
        track = this.tracks[this.index];
        if (this.supports.mp3) {
          this.$audio.attr('src', track.mp3);
        } else {
          this.$audio.attr('src', track.ogg);
        }
        el = "<span>" + track.title + "</span>";
        this.trackname.find('span').remove();
        this.trackname.append(el);
        if (Modernizr.cssanimations) {
          this.trackname.find('span').addClass('state-in');
        } else {
          this.trackname.find('span').animate({
            opacity: 1
          }, {
            duration: 500
          });
        }
      }
      return this;
    };

    RegionAudioplayer.prototype.play = function() {
      this.$audio[0].play();
      this.$el.removeClass().addClass('state-play');
      return this;
    };

    RegionAudioplayer.prototype.pause = function() {
      this.$audio[0].pause();
      this.$el.removeClass().addClass('state-pause');
      return this;
    };

    RegionAudioplayer.prototype.previous = function() {
      this.index = this.index - 1 < 0 ? this.tracks.length - 1 : this.index - 1;
      this.setTrack();
      this.play();
      return this;
    };

    RegionAudioplayer.prototype.next = function() {
      this.index = this.index + 1 === this.tracks.length ? 0 : this.index + 1;
      this.setTrack();
      this.play();
      return this;
    };

    return RegionAudioplayer;

  })(Region);

  /* --------------------------------------------
       Begin region.background.coffee
  --------------------------------------------
  */


  RegionBackground = (function(_super) {

    __extends(RegionBackground, _super);

    function RegionBackground() {
      return RegionBackground.__super__.constructor.apply(this, arguments);
    }

    RegionBackground.prototype.init = function() {
      var $el;
      $el = this.$el.detach();
      $('#container').append($el);
      this.type = this.$el.attr("data-type");
      if (this.type === "images") {
        this.setupImages();
      }
      return this;
    };

    RegionBackground.prototype.setupImages = function() {
      var i, image, src, tmp, _i, _len, _ref,
        _this = this;
      this.$images = this.$el.find('.background-image');
      this.delay = this.$el.data('delay');
      this.imagesUrl = [];
      tmp = [];
      this.$images.addClass('state-init');
      _ref = this.$images;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        image = _ref[i];
        if (_.isElement(image)) {
          src = $(image).data('src');
          if (_.isString(src)) {
            app.utils.imagePreload(src, function(img) {
              var _j, _len1, _ref1;
              tmp.push(src);
              if (tmp.length === _this.$images.length) {
                _ref1 = _this.$images;
                for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
                  image = _ref1[i];
                  if (_.isElement(image)) {
                    src = $(image).data('src');
                    _this.imagesUrl.push(src);
                  }
                }
                return _this.setupLoop();
              }
            });
          }
        }
      }
      return this;
    };

    RegionBackground.prototype.setupLoop = function() {
      var _this = this;
      this.$images.remove();
      this.index = 0;
      switch (this.imagesUrl.length) {
        case 0:
          null;
          break;
        case 1:
          this.setImage();
          break;
        default:
          this.events.on('background.imageSet', function() {
            return _this.setupTimeout();
          });
          this.setImage();
      }
      return this;
    };

    RegionBackground.prototype.setImage = function() {
      var $elPrev, cb, el, src,
        _this = this;
      src = this.imagesUrl[this.index];
      el = $("<div>").addClass("background-image state-init state-over").css("background-image", "url('" + src + "')");
      $elPrev = this.$el.find('.state-under');
      this.$el.append(el);
      cb = function() {
        var events;
        if (Modernizr.csstransitions) {
          return app.animate({
            element: el,
            cssClass: 'state-in',
            complete: function() {
              $elPrev.remove();
              $(el).removeClass("state-over").addClass("state-under");
              return _this.events.trigger('background.imageSet');
            }
          });
        } else {
          events = _this.events;
          cb = function(el) {
            $elPrev.remove();
            $(el).removeClass("state-over").addClass("state-under");
            return events.trigger('background.imageSet');
          };
          return $(el).animate({
            opacity: 1
          }, {
            duration: 1000,
            complete: function() {
              return cb(this);
            }
          });
        }
      };
      setTimeout(cb, 500);
      return this;
    };

    RegionBackground.prototype.setupTimeout = function() {
      var cb,
        _this = this;
      cb = function() {
        _this.index = _this.index + 1 === _this.imagesUrl.length ? 0 : _this.index + 1;
        _this.setImage();
        return null;
      };
      _.delay(cb, this.delay);
      return this;
    };

    RegionBackground.prototype.enter = function() {
      var cb,
        _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$el[0],
          cssClass: 'state-in',
          complete: function() {
            return _this.events.trigger('region.entered', [_this]);
          }
        });
      } else {
        this.$el.animate({
          opacity: 1
        }, {
          duration: 500,
          complete: function() {
            return _this.events.trigger('region.entered', [_this]);
          }
        });
        cb = function() {
          return _this.events.trigger('region.entered', [_this]);
        };
        _.delay(cb);
      }
      return this;
    };

    RegionBackground.prototype.exit = function() {
      var cb,
        _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$el[0],
          cssClass: 'state-out',
          complete: function() {
            _this.events.trigger('region.quitted', [_this]);
            _this.events.clear();
            return _this.$el.remove();
          }
        });
      } else {
        cb = function() {
          _this.events.trigger('region.quitted', [_this]);
          _this.events.clear();
          return _this.$el.remove();
        };
        this.$el.animate({
          opacity: 0
        }, {
          duration: 500,
          complete: function() {
            return cb();
          }
        });
      }
      return this;
    };

    return RegionBackground;

  })(Region);

  /* --------------------------------------------
       Begin region.menu.coffee
  --------------------------------------------
  */


  RegionMenu = (function(_super) {

    __extends(RegionMenu, _super);

    function RegionMenu() {
      return RegionMenu.__super__.constructor.apply(this, arguments);
    }

    RegionMenu.prototype.init = function() {
      var _this = this;
      this.$menu = this.$el.find('> * > ul');
      this.events.on('view.enter', function() {
        return _this.listSelect();
      });
      this.setSubMenus();
      return this;
    };

    RegionMenu.prototype.setSubMenus = function($el) {
      var _this = this;
      if ($el === void 0) {
        $el = this.$menu;
      }
      $el.find('> li').each(function(i, el) {
        var $ul, top, ul;
        ul = $(el).find('> ul')[0];
        if (_.isElement(ul)) {
          $ul = $(ul);
          top = $ul.height() * -1;
          return $ul.css('top', top);
        }
      });
      return this;
    };

    RegionMenu.prototype.listSelect = function() {
      var anchor, el, elName, end, list, url;
      this.$menu.find('li.nav-sel').removeClass('nav-sel');
      this.$menu.find('li.nav-item-sel').removeClass('nav-item-sel');
      url = window.location.href;
      anchor = this.$el.find("a[href='" + url + "']");
      if (anchor.length) {
        list = null;
        end = false;
        el = anchor;
        while (!end) {
          elName = el[0].tagName;
          if (elName === 'LI') {
            list = el;
          }
          el = el.parent();
          if (el.attr('data-region')) {
            end = true;
          }
        }
        list.addClass('nav-sel');
        anchor.parent().addClass('nav-item-sel');
      }
      return this;
    };

    return RegionMenu;

  })(Region);

  /* --------------------------------------------
       Begin region.page.coffee
  --------------------------------------------
  */


  RegionPage = (function(_super) {

    __extends(RegionPage, _super);

    function RegionPage() {
      return RegionPage.__super__.constructor.apply(this, arguments);
    }

    RegionPage.prototype.init = function() {
      this.$title = this.$el.find('> h1:eq(0)');
      this.$content = this.$el.find('> .page-content:eq(0)');
      this.$thumb = this.$el.find('#page-featured img');
      return this;
    };

    RegionPage.prototype.enter = function() {
      var _this = this;
      if (this.$thumb.length) {
        app.utils.imagePreload(this.$thumb[0], function(src) {
          if (Modernizr.cssanimations) {
            return app.animate({
              element: _this.$thumb[0],
              cssClass: 'state-loaded'
            });
          } else {
            return _this.$thumb.animate({
              opacity: 1
            }, {
              duration: 500
            });
          }
        });
      }
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-in'
        });
        app.animate({
          element: this.$content[0],
          cssClass: 'state-in',
          complete: function() {
            return _this.events.trigger('region.entered', [_this]);
          }
        });
      } else {
        this.$title.animate({
          opacity: 1
        }, {
          duration: 500
        });
        this.$content.animate({
          opacity: 1
        }, {
          duration: 500,
          complete: function() {
            return _this.events.trigger('region.entered', [_this]);
          }
        });
      }
      return this;
    };

    RegionPage.prototype.exit = function() {
      var _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-out'
        });
        app.animate({
          element: this.$content[0],
          cssClass: 'state-out',
          complete: function() {
            _this.events.trigger('region.quitted', [_this]);
            return _this.events.clear();
          }
        });
      } else {
        this.$title.animate({
          opacity: 0
        }, {
          duration: 500
        });
        this.$content.animate({
          opacity: 0
        }, {
          duration: 500,
          complete: function() {
            _this.events.trigger('region.quitted', [_this]);
            return _this.events.clear();
          }
        });
      }
      return this;
    };

    return RegionPage;

  })(Region);

  /* --------------------------------------------
       Begin region.sidebar.coffee
  --------------------------------------------
  */


  RegionSidebar = (function(_super) {

    __extends(RegionSidebar, _super);

    function RegionSidebar() {
      return RegionSidebar.__super__.constructor.apply(this, arguments);
    }

    RegionSidebar.prototype.enter = function() {
      var _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$el[0],
          cssClass: 'state-in',
          complete: function() {
            return _this.events.trigger('region.entered', [_this]);
          }
        });
      } else {
        this.$el.animate({
          opacity: 1
        }, {
          duration: 500,
          complete: function() {
            return _this.events.trigger('region.entered', [_this]);
          }
        });
      }
      return this;
    };

    RegionSidebar.prototype.exit = function() {
      var sidebarDisplay,
        _this = this;
      if (Modernizr.cssanimations) {
        sidebarDisplay = this.$el.css('display');
        if (sidebarDisplay === 'none') {
          this.events.trigger('region.quitted', [this]);
          this.events.clear();
        }
        app.animate({
          element: this.$el[0],
          cssClass: 'state-out',
          complete: function() {
            _this.events.trigger('region.quitted', [_this]);
            return _this.events.clear();
          }
        });
      } else {
        this.$el.animate({
          opacity: 0
        }, {
          duration: 500,
          complete: function() {
            _this.events.trigger('region.quitted', [_this]);
            return _this.events.clear();
          }
        });
      }
      return this;
    };

    return RegionSidebar;

  })(Region);

  /* --------------------------------------------
       Begin region.home.coffee
  --------------------------------------------
  */


  RegionHome = (function(_super) {

    __extends(RegionHome, _super);

    function RegionHome() {
      return RegionHome.__super__.constructor.apply(this, arguments);
    }

    RegionHome.prototype.init = function() {
      var _this = this;
      this.$boxes = this.$el.find('.home-box');
      this.$buttonNews = this.$el.find('#home-news-display');
      this.$claimMessage = this.$el.find('#home-claim h1 span');
      this.$claimButton = this.$el.find('#home-claim h1 a');
      this.events.on('page.toggleAside', function() {
        return _this.toggleAside();
      });
      if (this.$buttonNews.length) {
        this.$buttonNews.on('click', function(e) {
          return _this.events.trigger('page.toggleAside');
        });
      }
      return this;
    };

    RegionHome.prototype.toggleAside = function() {
      var animateOptions;
      if (this.$el.hasClass('state-translate')) {
        app.events.trigger('page.asideIn');
      } else {
        app.events.trigger('page.asideOut');
      }
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$el[0],
          cssClass: 'state-translate'
        });
      } else {
        animateOptions = {
          duration: 500,
          easing: 'swing'
        };
        if (this.$el.hasClass('news-displayed')) {
          this.$el.removeClass('news-displayed');
          this.$el.animate({
            left: 0
          }, animateOptions);
        } else {
          this.$el.animate({
            left: -300
          }, animateOptions);
          this.$el.addClass('news-displayed');
        }
      }
      return this;
    };

    RegionHome.prototype.enter = function() {
      var buttonCb, delay, interval, messageCb,
        _this = this;
      if (this.$buttonNews.length) {
        if (Modernizr.cssanimations) {
          app.animate({
            element: this.$buttonNews[0],
            cssClass: 'state-in'
          });
        } else {
          this.$buttonNews.fadeIn(500);
        }
      }
      if (this.$claimMessage.length) {
        if (Modernizr.cssanimations) {
          app.animate({
            element: this.$claimMessage[0],
            cssClass: 'state-in',
            complete: function() {
              return _this.events.trigger('region.entered', [_this]);
            }
          });
        } else {
          messageCb = function() {
            return _this.$claimMessage.animate({
              opacity: 1
            }, {
              duration: 1000
            });
          };
          _.delay(messageCb, 1000);
        }
      }
      if (this.$claimButton.length) {
        if (Modernizr.cssanimations) {
          app.animate({
            element: this.$claimButton[0],
            cssClass: 'state-in',
            complete: function() {
              if ((_this.$boxes.length === 0) && (_this.$claimMessage.length === 0)) {
                return _this.events.trigger('region.entered', [_this]);
              }
            }
          });
        } else {
          buttonCb = function() {
            return _this.$claimButton.animate({
              opacity: 1
            }, {
              duration: 1500
            });
          };
          _.delay(buttonCb, 1500);
        }
      }
      if (this.$boxes.length) {
        delay = 350;
        interval = 0;
        if (Modernizr.cssanimations) {
          this.$boxes.each(function(i, el) {
            var cb;
            cb = function() {
              return app.animate({
                element: el,
                cssClass: 'state-in',
                complete: function() {
                  if ((i === _this.$boxes.length - 1) && (_this.$claimMessage.length === 0)) {
                    return _this.events.trigger('region.entered', [_this]);
                  }
                }
              });
            };
            _.delay(cb, interval);
            return interval += delay;
          });
        } else {
          this.$boxes.each(function(i, el) {
            var cb;
            cb = function() {
              return $(el).animate({
                opacity: 1
              }, {
                duration: 500,
                complete: function() {
                  if (i === _this.$boxes.length - 1) {
                    return _this.events.trigger('region.entered', [_this]);
                  }
                }
              });
            };
            _.delay(cb, interval);
            return interval += delay;
          });
        }
      }
      if ((this.$claimMessage.length === 0) && (this.$boxes.length === 0) && (this.$claimButton.length === 0)) {
        this.events.trigger('region.entered', [this]);
      }
      return this;
    };

    RegionHome.prototype.exit = function() {
      var delay, interval,
        _this = this;
      this.$el.removeClass('state-translate');
      if (this.$buttonNews.length) {
        if (Modernizr.cssanimations) {
          app.animate({
            element: this.$buttonNews[0],
            cssClass: 'state-out'
          });
        } else {
          this.$buttonNews.fadeOut(500);
        }
      }
      if (this.$claimMessage.length) {
        if (Modernizr.cssanimations) {
          app.animate({
            element: this.$claimMessage[0],
            cssClass: 'state-out'
          });
        } else {
          this.$claimMessage.fadeOut(500);
        }
      }
      if (this.$claimButton.length) {
        if (Modernizr.cssanimations) {
          app.animate({
            element: this.$claimButton[0],
            cssClass: 'state-out'
          });
        } else {
          this.$claimButton.fadeOut(500);
        }
      }
      if (this.$boxes.length) {
        delay = 250;
        interval = 0;
        if (Modernizr.cssanimations) {
          this.$boxes.each(function(i, el) {
            var cb;
            cb = function() {
              return app.animate({
                element: el,
                cssClass: 'state-out',
                complete: function() {
                  if (i === _this.$boxes.length - 1) {
                    _this.events.trigger('region.quitted', [_this]);
                    return _this.events.clear();
                  }
                }
              });
            };
            _.delay(cb, interval);
            return interval += delay;
          });
        } else {
          this.$boxes.each(function(i, el) {
            var cb;
            cb = function() {
              return $(el).animate({
                opacity: 0
              }, {
                duration: 500,
                complete: function() {
                  if (i === _this.$boxes.length - 1) {
                    _this.events.trigger('region.quitted', [_this]);
                    return _this.events.clear();
                  }
                }
              });
            };
            _.delay(cb, interval);
            return interval += delay;
          });
        }
      } else {
        this.events.trigger('region.quitted', [this]);
        this.events.clear();
      }
      return this;
    };

    return RegionHome;

  })(Region);

  /* --------------------------------------------
       Begin region.aside.coffee
  --------------------------------------------
  */


  RegionAside = (function(_super) {

    __extends(RegionAside, _super);

    function RegionAside() {
      return RegionAside.__super__.constructor.apply(this, arguments);
    }

    RegionAside.prototype.init = function() {
      var _this = this;
      app.events.on('page.toggleAside', function() {
        return _this.toggle();
      });
      app.events.on('view.exit', function() {
        if (_this.$el.hasClass('state-translate')) {
          return _this.toggle();
        }
      });
      return this;
    };

    RegionAside.prototype.toggle = function() {
      var animateOptions;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$el[0],
          cssClass: 'state-translate'
        });
      } else {
        animateOptions = {
          duration: 500,
          easing: 'swing'
        };
        if (this.$el.hasClass('news-displayed')) {
          this.$el.removeClass('news-displayed');
          this.$el.animate({
            right: -300
          }, animateOptions);
        } else {
          this.$el.animate({
            right: 0
          }, animateOptions);
          this.$el.addClass('news-displayed');
        }
      }
      return this;
    };

    return RegionAside;

  })(Region);

  /* --------------------------------------------
       Begin region.gallery.coffee
  --------------------------------------------
  */


  RegionGallery = (function(_super) {

    __extends(RegionGallery, _super);

    function RegionGallery() {
      return RegionGallery.__super__.constructor.apply(this, arguments);
    }

    RegionGallery.prototype.init = function() {
      var _this = this;
      this.$loader = this.$el.find('#gallery-loader');
      this.$imageContainer = this.$el.find('#gallery-image-container');
      this.$caption = this.$el.find('#gallery-image-caption');
      this.$buttonNext = this.$el.find('#gallery-button-next');
      this.$buttonPrev = this.$el.find('#gallery-button-prev');
      this.$title = this.$el.find('h1');
      this.$swipe = this.$el.find('#gallery-image-swipe');
      if (typeof mthemes_gallery_images !== 'undefined' && _.isArray(mthemes_gallery_images)) {
        this.loadImages();
      }
      this.events.on('gallery.imageLoaded', function() {
        return _this.$loader.text("" + _this.percent + "%");
      });
      this.events.on('gallery.galleryLoaded', function() {
        return _this.buildGallery();
      });
      this.events.on('gallery.next', function() {
        return _this.next();
      });
      this.events.on('gallery.prev', function() {
        return _this.prev();
      });
      this.$buttonNext.hammer().on('tap', function() {
        return _this.events.trigger('gallery.next');
      });
      this.$buttonPrev.hammer().on('tap', function() {
        return _this.events.trigger('gallery.prev');
      });
      this.$swipe.hammer().on('swipeleft', function() {
        return _this.events.trigger('gallery.next');
      });
      this.$swipe.hammer().on('swiperight', function() {
        return _this.events.trigger('gallery.previous');
      });
      return this;
    };

    RegionGallery.prototype.next = function() {
      if (this.timeout) {
        clearTimeout(this.timeout);
      }
      this.index = (this.index + 1) < this.images.length ? this.index + 1 : 0;
      this.direction = 1;
      this.setImage();
      return this;
    };

    RegionGallery.prototype.prev = function() {
      if (this.timeout) {
        clearTimeout(this.timeout);
      }
      this.index = (this.index - 1) < 0 ? this.images.length - 1 : this.index - 1;
      this.direction = 0;
      this.setImage();
      return this;
    };

    RegionGallery.prototype.loadImages = function() {
      var imageLoadCb, imageLoadedCb,
        _this = this;
      this.images = mthemes_gallery_images;
      this.index = 0;
      this.percent = 0;
      imageLoadCb = function(el, i) {
        return app.utils.imagePreload(el.src, imageLoadedCb);
      };
      imageLoadedCb = function() {
        _this.index++;
        _this.percent = Math.ceil((100 / _this.images.length) * _this.index);
        _this.events.trigger('gallery.imageLoaded');
        if (_this.index === _this.images.length) {
          return _this.events.trigger('gallery.galleryLoaded');
        }
      };
      _.each(this.images, imageLoadCb);
      return this;
    };

    RegionGallery.prototype.buildGallery = function() {
      var cb,
        _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$loader[0],
          cssClass: 'state-out',
          complete: function() {
            return $(this).parent().remove();
          }
        });
      } else {
        cb = function() {
          return _this.$loader.parent().remove();
        };
        this.$loader.fadeOut(500, cb);
      }
      this.delay = typeof mthemes_gallery_images_delay !== 'undefined' && _.isNumber(mthemes_gallery_images_delay) ? mthemes_gallery_images_delay : 7500;
      this.autoplay = typeof mthemes_gallery_autoplay !== 'undefined' && mthemes_gallery_autoplay ? mthemes_gallery_autoplay : false;
      this.stop = false;
      this.index = 0;
      this.timeout = null;
      this.direction = 1;
      this.setImage(this.autoplay);
      return this;
    };

    RegionGallery.prototype.setImage = function(delay) {
      var $span, captionCb, cb, cb2, image,
        _this = this;
      if (delay == null) {
        delay = true;
      }
      if (!this.stop) {
        this.stop = true;
        image = this.images[this.index];
        $span = $('<span>').addClass('gallery-image-new').addClass('state-init').css('background-image', "url('" + image.src + "')");
        this.$imageContainer.append($span);
        cb = function(type, animation, el) {
          $(el).parent().find('span').not('.gallery-image-new').remove();
          $(el).removeClass('gallery-image-new');
          return _this.stop = false;
        };
        cb2 = function() {
          _this.index = (_this.index + 1) < _this.images.length ? _this.index + 1 : 0;
          _this.direction = 1;
          return _this.setImage();
        };
        captionCb = function() {
          if (image.caption !== '') {
            _this.$caption.text(image.caption);
            if (Modernizr.cssanimations) {
              return app.animate({
                element: _this.$caption[0],
                cssClass: 'state-out'
              });
            } else {
              return _this.$caption.animate({
                opacity: 1
              }, {
                duration: 500
              });
            }
          }
        };
        if (!this.$caption.hasClass('state-out')) {
          if (Modernizr.cssanimations) {
            app.animate({
              element: this.$caption[0],
              cssClass: 'state-out',
              complete: function() {
                return captionCb();
              }
            });
          } else {
            this.$caption.animate({
              opacity: 0
            }, {
              duration: 500,
              complete: function() {
                return captionCb();
              }
            });
          }
        } else {
          captionCb();
        }
        if (Modernizr.cssanimations) {
          app.animate({
            element: $span,
            cssClass: this.direction === 1 ? 'state-in-left' : 'state-in-right',
            complete: cb
          });
        } else {
          $span.animate({
            opacity: 1
          }, {
            duration: 500,
            complete: cb
          });
        }
        if (delay) {
          this.timeout = _.delay(cb2, this.delay);
        }
      }
      return this;
    };

    RegionGallery.prototype.enter = function() {
      var _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-in',
          complete: function() {
            return _this.events.trigger('region.entered', [_this]);
          }
        });
      } else {
        this.$title.animate({
          opacity: 1
        }, {
          duration: 500,
          complete: function() {
            return _this.events.trigger('region.entered', [_this]);
          }
        });
      }
      return this;
    };

    RegionGallery.prototype.exit = function() {
      var _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-out'
        });
        app.animate({
          element: this.$imageContainer[0],
          cssClass: 'state-out',
          complete: function() {
            _this.events.trigger('region.quitted', [_this]);
            return _this.events.clear();
          }
        });
      } else {
        this.$title.fadeOut(500);
        this.$imageContainer.fadeOut(500, function() {
          _this.events.trigger('region.quitted', [_this]);
          return _this.events.clear();
        });
      }
      return this;
    };

    return RegionGallery;

  })(Region);

  /* --------------------------------------------
       Begin region.collection.coffee
  --------------------------------------------
  */


  RegionCollection = (function(_super) {

    __extends(RegionCollection, _super);

    function RegionCollection() {
      return RegionCollection.__super__.constructor.apply(this, arguments);
    }

    RegionCollection.prototype.init = function() {
      var _this = this;
      this.$title = this.$el.find('h1');
      this.$content = this.$el.find('#collection-content');
      this.$container = this.$el.find('#collection-container');
      this.$elements = this.$el.find('.collection-item');
      this.$elementsContent = this.$elements.find('.collection-item-content');
      this.$tagsTitle = this.$el.find('#collection-tags-title');
      this.$tags = this.$el.find('#collection-tags-list');
      this.$tagsLi = this.$tags.find('li');
      this.$content.isotope({
        itemSelector: '.collection-item',
        layoutMode: 'masonry'
      });
      this.$elements.each(function(i, el) {
        var $el, $img, src;
        $el = $(el);
        $img = $el.find('img.collection-item-thumb');
        if ($img.length) {
          src = $img.attr('src');
          return app.utils.imagePreload(src, function(src) {
            var cb;
            if (Modernizr.cssanimations) {
              return app.animate({
                element: el,
                cssClass: 'state-fade-out',
                complete: function() {
                  $el.css('background-image', "url('" + src + "')");
                  return app.animate({
                    element: el,
                    cssClass: 'state-fade-in'
                  });
                }
              });
            } else {
              cb = function() {
                $el.css('background-image', "url('" + src + "')");
                return $el.animate({
                  opacity: 1
                }, {
                  duration: 500
                });
              };
              return $el.animate({
                opacity: 0
              }, {
                duration: 500,
                complete: cb
              });
            }
          });
        }
      });
      this.$tagsLi.hammer().on('tap', function(e) {
        return _this.setFilter($(e.target).attr('data-slug'));
      });
      return this.filter = null;
    };

    RegionCollection.prototype.setFilter = function(slug) {
      if (slug !== this.filter) {
        this.filter = slug === '*' ? slug : ".tag-" + slug;
        this.$tagsLi.removeClass('collection-tags-list-sel');
        this.$tagsLi.filter("[data-slug='" + slug + "']").addClass('collection-tags-list-sel');
        this.$content.isotope({
          filter: this.filter
        });
      }
      return this;
    };

    RegionCollection.prototype.enter = function() {
      var delay, interval,
        _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-in'
        });
      } else {
        this.$title.animate({
          opacity: 1
        }, {
          duration: 500
        });
      }
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$tagsTitle[0],
          cssClass: 'state-in'
        });
      } else {
        this.$tagsTitle.animate({
          opacity: 1
        }, {
          duration: 500
        });
      }
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$tags[0],
          cssClass: 'state-in'
        });
      } else {
        this.$tags.animate({
          opacity: 1
        }, {
          duration: 500
        });
      }
      delay = 200;
      interval = 0;
      this.$elements.each(function(i, el) {
        var cb;
        el = $(el).find('.collection-item-content');
        cb = function() {
          if (Modernizr.cssanimations) {
            return app.animate({
              element: el,
              cssClass: 'state-in',
              complete: function() {
                if (i === _this.$elements.length - 1) {
                  return _this.events.trigger('region.entered', [_this]);
                }
              }
            });
          } else {
            return $(el).animate({
              opacity: 1
            }, {
              duration: 1000,
              complete: function() {
                if (i === _this.$elements.length - 1) {
                  return _this.events.trigger('region.entered', [_this]);
                }
              }
            });
          }
        };
        _.delay(cb, interval);
        return interval += delay;
      });
      return this;
    };

    RegionCollection.prototype.exit = function() {
      var cb,
        _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-out'
        });
      } else {
        this.$title.animate({
          opacity: 0
        }, {
          duration: 700
        });
      }
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$tagsTitle[0],
          cssClass: 'state-out'
        });
      } else {
        this.$tagsTitle.animate({
          opacity: 0
        }, {
          duration: 700
        });
      }
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$tags[0],
          cssClass: 'state-out'
        });
      } else {
        this.$tags.animate({
          opacity: 0
        }, {
          duration: 700
        });
      }
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$container[0],
          cssClass: 'state-out',
          complete: function() {
            _this.events.trigger('region.quitted', [_this]);
            return _this.events.clear();
          }
        });
      } else {
        cb = function() {
          _this.events.trigger('region.quitted', [_this]);
          return _this.events.clear();
        };
        this.$container.animate({
          opacity: 0
        }, {
          duration: 500,
          complete: cb
        });
      }
      return this;
    };

    return RegionCollection;

  })(Region);

  /* --------------------------------------------
       Begin region.blog.coffee
  --------------------------------------------
  */


  RegionBlog = (function(_super) {

    __extends(RegionBlog, _super);

    function RegionBlog() {
      return RegionBlog.__super__.constructor.apply(this, arguments);
    }

    RegionBlog.prototype.init = function() {
      var tapCb,
        _this = this;
      this.$content = this.$el.find('#blog-content');
      this.$articles = this.$el.find('article');
      this.$buttons = this.$el.find('.blog-button');
      this.$bar = this.$el.find('#blog-content-bar');
      this.$pagination = this.$el.find('#blog-pagination');
      this.$title = this.$bar.find('h1');
      tapCb = function(e) {
        var tagName;
        tagName = e.target.tagName.toLowerCase();
        while (tagName !== 'span') {
          e.target = $(e.target).parent()[0];
          tagName = e.target.tagName.toLowerCase();
        }
        return _this.move(e);
      };
      this.$buttons.hammer().on('tap', tapCb);
      return this;
    };

    RegionBlog.prototype.move = function(e) {
      var $currentArticle, $el, $nextArticle, direction, position;
      $el = $(e.target);
      direction = $el.attr('id') === 'blog-button-up' ? 0 : 1;
      $currentArticle = this.$el.find('article.blog-list-active');
      $nextArticle = direction === 1 ? $currentArticle.next() : $currentArticle.prev();
      if ($nextArticle.length === 1 && $nextArticle[0].tagName.toLowerCase() === 'article') {
        position = $nextArticle.position();
        $currentArticle.removeClass('blog-list-active');
        $nextArticle.addClass('blog-list-active');
        if (Modernizr.cssanimations) {
          this.$bar.css('top', position.top * -1);
        } else {
          this.$bar.animate({
            top: position.top * -1
          }, {
            duration: 500
          });
        }
      }
      return this;
    };

    RegionBlog.prototype.enter = function() {
      var articlesCb, buttonsCb, delay, interval,
        _this = this;
      delay = 200;
      interval = 0;
      articlesCb = function(i, el) {
        var animateCb;
        animateCb = function() {
          if (Modernizr.cssanimations) {
            return app.animate({
              element: el,
              cssClass: 'state-in',
              complete: function() {
                if (i === _this.$articles.length - 1) {
                  return _this.events.trigger('region.entered', [_this]);
                }
              }
            });
          } else {
            return $(el).animate({
              opacity: 1
            }, {
              duration: 500,
              complete: function() {
                if (i === _this.$articles.length - 1) {
                  return _this.events.trigger('region.entered', [_this]);
                }
              }
            });
          }
        };
        _.delay(animateCb, interval);
        return interval += delay;
      };
      buttonsCb = function(i, el) {
        if (Modernizr.cssanimations) {
          return app.animate({
            element: el,
            cssClass: 'state-in'
          });
        } else {
          return $(el).animate({
            opacity: 1
          }, {
            duration: 500
          });
        }
      };
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-in'
        });
      } else {
        this.$title.animate({
          opacity: 1
        }, {
          duration: 500
        });
      }
      if (this.$pagination.length) {
        if (Modernizr.cssanimations) {
          app.animate({
            element: this.$pagination[0],
            cssClass: 'state-in'
          });
        } else {
          this.$pagination.animate({
            opacity: 1
          }, {
            duration: 500
          });
        }
      }
      this.$buttons.each(buttonsCb);
      this.$articles.find('.blog-list-content').each(articlesCb);
      return this;
    };

    RegionBlog.prototype.exit = function() {
      var articlesCb, buttonsCb, delay, interval,
        _this = this;
      delay = 200;
      interval = 0;
      articlesCb = function(i, el) {
        var animateCb;
        animateCb = function() {
          var cb;
          if (Modernizr.cssanimations) {
            return app.animate({
              element: el,
              cssClass: 'state-out',
              complete: function() {
                if (i === _this.$articles.length - 1) {
                  _this.events.trigger('region.quitted', [_this]);
                  return _this.events.clear();
                }
              }
            });
          } else {
            cb = function() {
              if (i === _this.$articles.length - 1) {
                _this.events.trigger('region.quitted', [_this]);
                return _this.events.clear();
              }
            };
            return $(el).animate({
              opacity: 0
            }, {
              duration: 500,
              complete: function() {
                return cb();
              }
            });
          }
        };
        _.delay(animateCb, interval);
        return interval += delay;
      };
      buttonsCb = function(i, el) {
        return app.animate({
          element: el,
          cssClass: 'state-out'
        });
      };
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-out'
        });
      } else {
        this.$title.animate({
          opacity: 0
        }, {
          duration: 500
        });
      }
      if (this.$pagination.length) {
        app.animate({
          element: this.$pagination[0],
          cssClass: 'state-out'
        });
      }
      this.$buttons.each(buttonsCb);
      this.$articles.find('.blog-list-content').each(articlesCb);
      return this;
    };

    return RegionBlog;

  })(Region);

  /* --------------------------------------------
       Begin region.video.coffee
  --------------------------------------------
  */


  RegionVideo = (function(_super) {

    __extends(RegionVideo, _super);

    function RegionVideo() {
      return RegionVideo.__super__.constructor.apply(this, arguments);
    }

    RegionVideo.prototype.init = function() {
      this.$title = this.$el.find('h1');
      this.$video = this.$el.find('#video-content');
      return this;
    };

    RegionVideo.prototype.enter = function() {
      var _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-in'
        });
        app.animate({
          element: this.$video[0],
          cssClass: 'state-in',
          complete: function() {
            return _this.events.trigger('region.entered', [_this]);
          }
        });
      } else {
        this.$title.animate({
          opacity: 1
        }, {
          duration: 500
        });
        this.$video.animate({
          opacity: 1
        }, {
          duration: 500
        });
      }
      return this;
    };

    RegionVideo.prototype.exit = function() {
      var cb,
        _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-out'
        });
        app.animate({
          element: this.$video[0],
          cssClass: 'state-out',
          complete: function() {
            _this.events.trigger('region.quitted', [_this]);
            return _this.events.clear();
          }
        });
      } else {
        cb = function() {
          _this.events.trigger('region.quitted', [_this]);
          return _this.events.clear();
        };
        this.$title.animate({
          opacity: 0
        }, {
          duration: 500
        });
        this.$video.animate({
          opacity: 0
        }, {
          duration: 500,
          complete: cb
        });
      }
      return this;
    };

    return RegionVideo;

  })(Region);

  /* --------------------------------------------
       Begin region.halfpage.coffee
  --------------------------------------------
  */


  RegionHalfpage = (function(_super) {

    __extends(RegionHalfpage, _super);

    function RegionHalfpage() {
      return RegionHalfpage.__super__.constructor.apply(this, arguments);
    }

    RegionHalfpage.prototype.init = function() {
      this.$title = this.$el.find('h1');
      this.$container = this.$el.find('#half-page-container');
      this.$column1 = this.$el.find('#half-page-column-1');
      this.$column2 = this.$el.find('#half-page-column-2');
      return this;
    };

    RegionHalfpage.prototype.enter = function() {
      var _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-in'
        });
        app.animate({
          element: this.$column1[0],
          cssClass: 'state-in'
        });
        app.animate({
          element: this.$column2[0],
          cssClass: 'state-in',
          complete: function() {
            return _this.events.trigger('region.entered', [_this]);
          }
        });
      } else {
        this.$title.animate({
          opacity: 1
        }, {
          duration: 500
        });
        this.$column1.animate({
          opacity: 1
        }, {
          duration: 500
        });
        this.$column2.animate({
          opacity: 1
        }, {
          duration: 500
        });
      }
      return this;
    };

    RegionHalfpage.prototype.exit = function() {
      var cb,
        _this = this;
      if (Modernizr.cssanimations) {
        app.animate({
          element: this.$title[0],
          cssClass: 'state-out'
        });
        app.animate({
          element: this.$column1[0],
          cssClass: 'state-out'
        });
        app.animate({
          element: this.$column2[0],
          cssClass: 'state-out',
          complete: function() {
            _this.events.trigger('region.quitted', [_this]);
            return _this.events.clear();
          }
        });
      } else {
        cb = function() {
          _this.events.trigger('region.quitted', [_this]);
          return _this.events.clear();
        };
        this.$title.animate({
          opacity: 0
        }, {
          duration: 500
        });
        this.$column1.animate({
          opacity: 0
        }, {
          duration: 500
        });
        this.$column2.animate({
          opacity: 0
        }, {
          duration: 500,
          complete: cb
        });
      }
      return this;
    };

    return RegionHalfpage;

  })(Region);

  /* --------------------------------------------
       Begin region.socials.coffee
  --------------------------------------------
  */


  RegionSocials = (function(_super) {

    __extends(RegionSocials, _super);

    function RegionSocials() {
      return RegionSocials.__super__.constructor.apply(this, arguments);
    }

    RegionSocials.prototype.init = function() {
      var _this = this;
      this.events.on('viewport.resize', function() {
        return _this.switchDisplay();
      });
      return this;
    };

    RegionSocials.prototype.switchDisplay = function() {
      var cb,
        _this = this;
      cb = function() {
        var $footer, $menu, audioplayerWidth, footerClasses, footerWidth, menuWidth, socialsWidth;
        $footer = _this.$el.parent();
        if ($footer.position().top > 100) {
          $menu = $footer.find('#footer-menu > * > ul');
          footerClasses = $footer.attr('class') ? $footer.attr('class').split(' ') : [];
          footerWidth = $footer.width() / 2;
          menuWidth = 0;
          socialsWidth = _this.$el.width();
          $menu.find('li').each(function(i, el) {
            return menuWidth += $(el).width() + 1;
          });
          if (footerClasses.length > 0) {
            audioplayerWidth = $footer.find('#audioplayer').width();
            if ((audioplayerWidth + socialsWidth + menuWidth) > footerWidth) {
              _this.$el.css('display', 'none');
            } else {
              _this.$el.css('display', 'block');
            }
          }
          if (footerClasses.length === 0) {
            if ((socialsWidth + menuWidth) > footerWidth) {
              return _this.$el.css('display', 'none');
            } else {
              return _this.$el.css('display', 'block');
            }
          }
        } else {
          return _this.$el.css('display', 'none');
        }
      };
      _.delay(cb, 100);
      return this;
    };

    return RegionSocials;

  })(Region);

  /* --------------------------------------------
       Begin region.loader.coffee
  --------------------------------------------
  */


  RegionLoader = (function(_super) {

    __extends(RegionLoader, _super);

    function RegionLoader() {
      return RegionLoader.__super__.constructor.apply(this, arguments);
    }

    RegionLoader.prototype.init = function() {
      var _this = this;
      this.events.on('view.quitted', function() {
        return _this.display();
      });
      this.events.on('view.enter', function() {
        return _this.hide();
      });
      return this;
    };

    RegionLoader.prototype.display = function() {
      this.$el.removeClass().addClass('loader-display');
      return this;
    };

    RegionLoader.prototype.hide = function() {
      this.$el.removeClass().addClass('loader-hide');
      return this;
    };

    return RegionLoader;

  })(Region);

}).call(this);
