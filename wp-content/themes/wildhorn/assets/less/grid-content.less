/////////////////
// Semantic.gs // for LESS: http://lesscss.org/
/////////////////

/* !semantic grid system */

// Defaults which you can freely override
@gc-column-width: 60;
@gc-gutter-width: @size-baseline;
@gc-columns: 12;

// Utility variable â€” you should never need to modify this
@gc-gridsystem-width: (@gc-column-width*@gc-columns) + (@gc-gutter-width*@gc-columns) * 1px;

// Set @gc-total-width to 100% for a fluid layout
@gc-total-width: @gc-gridsystem-width;
@gc-total-width: 100%;

.gc-row(@gc-columns:@gc-columns) {
	display: block;
	width: @gc-total-width*((@gc-gutter-width + @gc-gridsystem-width)/@gc-gridsystem-width);
	margin: 0 @gc-total-width*(((@gc-gutter-width*.5)/@gc-gridsystem-width)*-1);
	// *width: @gc-total-width*((@gc-gutter-width + @gc-gridsystem-width)/@gc-gridsystem-width)-@gc-correction;
	// *margin: 0 @gc-total-width*(((@gc-gutter-width*.5)/@gc-gridsystem-width)*-1)-@gc-correction;
	.clearfix;
}
.gc-column(@gc-x,@gc-columns:@gc-columns) {
	display: inline;
	float: left;
	width: @gc-total-width*((((@gc-gutter-width+@gc-column-width)*@gc-x)-@gc-gutter-width) / @gc-gridsystem-width);
	margin: 0 @gc-total-width*((@gc-gutter-width*.5)/@gc-gridsystem-width);
	// *width: @gc-total-width*((((@gc-gutter-width+@gc-column-width)*@gc-x)-@gc-gutter-width) / @gc-gridsystem-width)-@gc-correction;
	// *margin: 0 @gc-total-width*((@gc-gutter-width*.5)/@gc-gridsystem-width)-@gc-correction;
}
.gc-push(@gc-offset:1) {
	margin-left: @gc-total-width*(((@gc-gutter-width+@gc-column-width)*@gc-offset) / @gc-gridsystem-width) + @gc-total-width*((@gc-gutter-width*.5)/@gc-gridsystem-width);
}
.gc-pull(@gc-offset:1) {
	margin-right: @gc-total-width*(((@gc-gutter-width+@gc-column-width)*@gc-offset) / @gc-gridsystem-width) + @gc-total-width*((@gc-gutter-width*.5)/@gc-gridsystem-width);
}